//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Car.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Car: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Car()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Car"",
    ""maps"": [
        {
            ""name"": ""KBM"",
            ""id"": ""05eeb9f9-bfa4-45fc-b448-f4b461578943"",
            ""actions"": [
                {
                    ""name"": ""Drive"",
                    ""type"": ""Value"",
                    ""id"": ""601db858-6fe8-4aad-b7d5-2f4adb2c8131"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Steer"",
                    ""type"": ""Value"",
                    ""id"": ""db6e3b59-950e-4958-a6e1-5da832383766"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""b704fe28-2b35-4531-a264-8ac843f3001e"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Gears"",
                    ""type"": ""Button"",
                    ""id"": ""f02065ff-4509-4d1b-a324-d0c9dda4733d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Value"",
                    ""id"": ""c9896eb1-cdbf-47d4-a10a-ee60e7aca7f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Go"",
                    ""id"": ""97f43d98-6b50-4fbd-bb13-e88bd9994443"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b3990f75-c2d0-4f19-951d-0f721c640c5c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ffd6ade5-610b-4c4b-8dee-574ba69d9c42"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Steer"",
                    ""id"": ""64222291-48ff-425d-896f-a4c548294872"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""acf2da0c-15f5-482c-8c03-6bbe0cb55df0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c62f5f82-8f10-4158-8898-b6aade11e983"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f0f7f66b-eb1c-448a-b131-c7c44fd3b02e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM;Playstation Controller;Xbox Controller;Sim Rig"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24b82a3b-07bf-4931-85da-f93f56860d89"",
                    ""path"": ""<DualShockGamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Controller"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Switch"",
                    ""id"": ""7de0b7e4-bb13-47a1-ac0b-f3625a983c2b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gears"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""53c28f44-9f82-4c0b-b14b-2296c862f73a"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Gears"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""85944a08-bb1e-4867-beba-fcf3ee4491ad"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Gears"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PS"",
            ""id"": ""b516810e-8123-4b6b-817d-24ad8c17b995"",
            ""actions"": [
                {
                    ""name"": ""Drive"",
                    ""type"": ""Value"",
                    ""id"": ""03899d0b-8a69-43c9-97f3-53374ebd95cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Steer"",
                    ""type"": ""Value"",
                    ""id"": ""24bf3e91-b2b0-44a0-aca6-f5e7f2d8b241"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""6afe94a7-aa44-4515-99fa-8d9acabf6005"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Gears"",
                    ""type"": ""Button"",
                    ""id"": ""04e9bac0-075e-497f-b200-dab79442fa19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""f027ba9d-bc40-457e-8edf-07e5a1ad7cea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Go"",
                    ""id"": ""026b2511-55be-4e25-8470-2c2ed292231a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2fb4f70e-a82b-4443-b888-3f9aecdc6953"",
                    ""path"": ""<DualShockGamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Controller"",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""939859ee-cadc-4976-b438-a7999cc04f71"",
                    ""path"": ""<DualShockGamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Controller"",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e2d66f77-a462-4ece-a7cd-35183a2f66f7"",
                    ""path"": ""<DualShockGamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Controller"",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f805e84-9137-4eee-ad97-05495962e6c0"",
                    ""path"": ""<DualShockGamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Controller"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be6a974a-9441-4f34-97be-a8b251a09f93"",
                    ""path"": ""<DualShockGamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Controller"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Switch"",
                    ""id"": ""1ec848dd-6856-45b6-a861-862ee85112c3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gears"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""225d7dfe-d354-45cf-9f71-f364fb05152e"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Controller"",
                    ""action"": ""Gears"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5521b820-08df-4421-9400-755a76de9860"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Controller"",
                    ""action"": ""Gears"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Xbox"",
            ""id"": ""9b6eb6ff-846d-42de-9a09-6103e6f528de"",
            ""actions"": [
                {
                    ""name"": ""Drive"",
                    ""type"": ""Value"",
                    ""id"": ""0f2ee99b-23c5-4f91-bfc0-cb6e8dc450b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Steer"",
                    ""type"": ""Value"",
                    ""id"": ""ea7a4416-1472-4fe0-a31b-02f111949fb6"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""385bd240-8fc1-401b-ae95-45405234df18"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Gears"",
                    ""type"": ""Button"",
                    ""id"": ""e1f56192-8f09-4978-852e-d078651d7de3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""cbd315e9-5aff-47a7-a8be-a36b97c720db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Go"",
                    ""id"": ""3961d67c-b81f-451f-b7e6-1f860d3e626f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b1392598-6732-43a4-ba11-31972e010256"",
                    ""path"": ""<XInputController>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Controller"",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""741bd353-5b2b-4207-bc69-706b5e5928ee"",
                    ""path"": ""<XInputController>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Controller"",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""22e77a09-c671-4420-9ef9-b2cf9e12bf45"",
                    ""path"": ""<XInputController>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Controller"",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f601390-4eed-4fd3-a6a7-432909986958"",
                    ""path"": ""<XInputController>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Controller"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a88fa96-361e-499e-9bb6-12eca9038f9c"",
                    ""path"": ""<XInputController>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Controller"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Switch"",
                    ""id"": ""0913bb5d-6d80-4632-81c4-987ae258d21c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gears"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ab615f43-2865-41e6-bc68-1f44e3009466"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Controller"",
                    ""action"": ""Gears"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7b21ca4b-ed82-4b10-83fc-ee2a9513d1bf"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Controller"",
                    ""action"": ""Gears"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Sim Rig"",
            ""id"": ""91fe5248-7a74-4a3f-83e3-6b445f8d1312"",
            ""actions"": [
                {
                    ""name"": ""Drive"",
                    ""type"": ""Value"",
                    ""id"": ""0ef6971d-1ca3-41d9-8c8f-cafb8c3df91d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Go"",
                    ""id"": ""3216af8f-b56c-4017-bdf3-d847044efcba"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""400b9164-5b9e-43a5-97ce-0a2a729c50db"",
                    ""path"": ""<HID>/{Back}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Sim Rig"",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""feb6b0d5-9a28-49cc-8fae-71462c62a68e"",
                    ""path"": ""<HID>/{Forward}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Sim Rig"",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": []
        },
        {
            ""name"": ""Playstation Controller"",
            ""bindingGroup"": ""Playstation Controller"",
            ""devices"": []
        },
        {
            ""name"": ""Xbox Controller"",
            ""bindingGroup"": ""Xbox Controller"",
            ""devices"": []
        },
        {
            ""name"": ""Sim Rig"",
            ""bindingGroup"": ""Sim Rig"",
            ""devices"": []
        }
    ]
}");
        // KBM
        m_KBM = asset.FindActionMap("KBM", throwIfNotFound: true);
        m_KBM_Drive = m_KBM.FindAction("Drive", throwIfNotFound: true);
        m_KBM_Steer = m_KBM.FindAction("Steer", throwIfNotFound: true);
        m_KBM_Look = m_KBM.FindAction("Look", throwIfNotFound: true);
        m_KBM_Gears = m_KBM.FindAction("Gears", throwIfNotFound: true);
        m_KBM_Pause = m_KBM.FindAction("Pause", throwIfNotFound: true);
        // PS
        m_PS = asset.FindActionMap("PS", throwIfNotFound: true);
        m_PS_Drive = m_PS.FindAction("Drive", throwIfNotFound: true);
        m_PS_Steer = m_PS.FindAction("Steer", throwIfNotFound: true);
        m_PS_Look = m_PS.FindAction("Look", throwIfNotFound: true);
        m_PS_Gears = m_PS.FindAction("Gears", throwIfNotFound: true);
        m_PS_Pause = m_PS.FindAction("Pause", throwIfNotFound: true);
        // Xbox
        m_Xbox = asset.FindActionMap("Xbox", throwIfNotFound: true);
        m_Xbox_Drive = m_Xbox.FindAction("Drive", throwIfNotFound: true);
        m_Xbox_Steer = m_Xbox.FindAction("Steer", throwIfNotFound: true);
        m_Xbox_Look = m_Xbox.FindAction("Look", throwIfNotFound: true);
        m_Xbox_Gears = m_Xbox.FindAction("Gears", throwIfNotFound: true);
        m_Xbox_Pause = m_Xbox.FindAction("Pause", throwIfNotFound: true);
        // Sim Rig
        m_SimRig = asset.FindActionMap("Sim Rig", throwIfNotFound: true);
        m_SimRig_Drive = m_SimRig.FindAction("Drive", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KBM
    private readonly InputActionMap m_KBM;
    private List<IKBMActions> m_KBMActionsCallbackInterfaces = new List<IKBMActions>();
    private readonly InputAction m_KBM_Drive;
    private readonly InputAction m_KBM_Steer;
    private readonly InputAction m_KBM_Look;
    private readonly InputAction m_KBM_Gears;
    private readonly InputAction m_KBM_Pause;
    public struct KBMActions
    {
        private @Car m_Wrapper;
        public KBMActions(@Car wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drive => m_Wrapper.m_KBM_Drive;
        public InputAction @Steer => m_Wrapper.m_KBM_Steer;
        public InputAction @Look => m_Wrapper.m_KBM_Look;
        public InputAction @Gears => m_Wrapper.m_KBM_Gears;
        public InputAction @Pause => m_Wrapper.m_KBM_Pause;
        public InputActionMap Get() { return m_Wrapper.m_KBM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KBMActions set) { return set.Get(); }
        public void AddCallbacks(IKBMActions instance)
        {
            if (instance == null || m_Wrapper.m_KBMActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KBMActionsCallbackInterfaces.Add(instance);
            @Drive.started += instance.OnDrive;
            @Drive.performed += instance.OnDrive;
            @Drive.canceled += instance.OnDrive;
            @Steer.started += instance.OnSteer;
            @Steer.performed += instance.OnSteer;
            @Steer.canceled += instance.OnSteer;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Gears.started += instance.OnGears;
            @Gears.performed += instance.OnGears;
            @Gears.canceled += instance.OnGears;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IKBMActions instance)
        {
            @Drive.started -= instance.OnDrive;
            @Drive.performed -= instance.OnDrive;
            @Drive.canceled -= instance.OnDrive;
            @Steer.started -= instance.OnSteer;
            @Steer.performed -= instance.OnSteer;
            @Steer.canceled -= instance.OnSteer;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Gears.started -= instance.OnGears;
            @Gears.performed -= instance.OnGears;
            @Gears.canceled -= instance.OnGears;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IKBMActions instance)
        {
            if (m_Wrapper.m_KBMActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKBMActions instance)
        {
            foreach (var item in m_Wrapper.m_KBMActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KBMActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KBMActions @KBM => new KBMActions(this);

    // PS
    private readonly InputActionMap m_PS;
    private List<IPSActions> m_PSActionsCallbackInterfaces = new List<IPSActions>();
    private readonly InputAction m_PS_Drive;
    private readonly InputAction m_PS_Steer;
    private readonly InputAction m_PS_Look;
    private readonly InputAction m_PS_Gears;
    private readonly InputAction m_PS_Pause;
    public struct PSActions
    {
        private @Car m_Wrapper;
        public PSActions(@Car wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drive => m_Wrapper.m_PS_Drive;
        public InputAction @Steer => m_Wrapper.m_PS_Steer;
        public InputAction @Look => m_Wrapper.m_PS_Look;
        public InputAction @Gears => m_Wrapper.m_PS_Gears;
        public InputAction @Pause => m_Wrapper.m_PS_Pause;
        public InputActionMap Get() { return m_Wrapper.m_PS; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PSActions set) { return set.Get(); }
        public void AddCallbacks(IPSActions instance)
        {
            if (instance == null || m_Wrapper.m_PSActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PSActionsCallbackInterfaces.Add(instance);
            @Drive.started += instance.OnDrive;
            @Drive.performed += instance.OnDrive;
            @Drive.canceled += instance.OnDrive;
            @Steer.started += instance.OnSteer;
            @Steer.performed += instance.OnSteer;
            @Steer.canceled += instance.OnSteer;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Gears.started += instance.OnGears;
            @Gears.performed += instance.OnGears;
            @Gears.canceled += instance.OnGears;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPSActions instance)
        {
            @Drive.started -= instance.OnDrive;
            @Drive.performed -= instance.OnDrive;
            @Drive.canceled -= instance.OnDrive;
            @Steer.started -= instance.OnSteer;
            @Steer.performed -= instance.OnSteer;
            @Steer.canceled -= instance.OnSteer;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Gears.started -= instance.OnGears;
            @Gears.performed -= instance.OnGears;
            @Gears.canceled -= instance.OnGears;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPSActions instance)
        {
            if (m_Wrapper.m_PSActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPSActions instance)
        {
            foreach (var item in m_Wrapper.m_PSActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PSActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PSActions @PS => new PSActions(this);

    // Xbox
    private readonly InputActionMap m_Xbox;
    private List<IXboxActions> m_XboxActionsCallbackInterfaces = new List<IXboxActions>();
    private readonly InputAction m_Xbox_Drive;
    private readonly InputAction m_Xbox_Steer;
    private readonly InputAction m_Xbox_Look;
    private readonly InputAction m_Xbox_Gears;
    private readonly InputAction m_Xbox_Pause;
    public struct XboxActions
    {
        private @Car m_Wrapper;
        public XboxActions(@Car wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drive => m_Wrapper.m_Xbox_Drive;
        public InputAction @Steer => m_Wrapper.m_Xbox_Steer;
        public InputAction @Look => m_Wrapper.m_Xbox_Look;
        public InputAction @Gears => m_Wrapper.m_Xbox_Gears;
        public InputAction @Pause => m_Wrapper.m_Xbox_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Xbox; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XboxActions set) { return set.Get(); }
        public void AddCallbacks(IXboxActions instance)
        {
            if (instance == null || m_Wrapper.m_XboxActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XboxActionsCallbackInterfaces.Add(instance);
            @Drive.started += instance.OnDrive;
            @Drive.performed += instance.OnDrive;
            @Drive.canceled += instance.OnDrive;
            @Steer.started += instance.OnSteer;
            @Steer.performed += instance.OnSteer;
            @Steer.canceled += instance.OnSteer;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Gears.started += instance.OnGears;
            @Gears.performed += instance.OnGears;
            @Gears.canceled += instance.OnGears;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IXboxActions instance)
        {
            @Drive.started -= instance.OnDrive;
            @Drive.performed -= instance.OnDrive;
            @Drive.canceled -= instance.OnDrive;
            @Steer.started -= instance.OnSteer;
            @Steer.performed -= instance.OnSteer;
            @Steer.canceled -= instance.OnSteer;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Gears.started -= instance.OnGears;
            @Gears.performed -= instance.OnGears;
            @Gears.canceled -= instance.OnGears;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IXboxActions instance)
        {
            if (m_Wrapper.m_XboxActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXboxActions instance)
        {
            foreach (var item in m_Wrapper.m_XboxActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XboxActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XboxActions @Xbox => new XboxActions(this);

    // Sim Rig
    private readonly InputActionMap m_SimRig;
    private List<ISimRigActions> m_SimRigActionsCallbackInterfaces = new List<ISimRigActions>();
    private readonly InputAction m_SimRig_Drive;
    public struct SimRigActions
    {
        private @Car m_Wrapper;
        public SimRigActions(@Car wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drive => m_Wrapper.m_SimRig_Drive;
        public InputActionMap Get() { return m_Wrapper.m_SimRig; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SimRigActions set) { return set.Get(); }
        public void AddCallbacks(ISimRigActions instance)
        {
            if (instance == null || m_Wrapper.m_SimRigActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SimRigActionsCallbackInterfaces.Add(instance);
            @Drive.started += instance.OnDrive;
            @Drive.performed += instance.OnDrive;
            @Drive.canceled += instance.OnDrive;
        }

        private void UnregisterCallbacks(ISimRigActions instance)
        {
            @Drive.started -= instance.OnDrive;
            @Drive.performed -= instance.OnDrive;
            @Drive.canceled -= instance.OnDrive;
        }

        public void RemoveCallbacks(ISimRigActions instance)
        {
            if (m_Wrapper.m_SimRigActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISimRigActions instance)
        {
            foreach (var item in m_Wrapper.m_SimRigActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SimRigActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SimRigActions @SimRig => new SimRigActions(this);
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    private int m_PlaystationControllerSchemeIndex = -1;
    public InputControlScheme PlaystationControllerScheme
    {
        get
        {
            if (m_PlaystationControllerSchemeIndex == -1) m_PlaystationControllerSchemeIndex = asset.FindControlSchemeIndex("Playstation Controller");
            return asset.controlSchemes[m_PlaystationControllerSchemeIndex];
        }
    }
    private int m_XboxControllerSchemeIndex = -1;
    public InputControlScheme XboxControllerScheme
    {
        get
        {
            if (m_XboxControllerSchemeIndex == -1) m_XboxControllerSchemeIndex = asset.FindControlSchemeIndex("Xbox Controller");
            return asset.controlSchemes[m_XboxControllerSchemeIndex];
        }
    }
    private int m_SimRigSchemeIndex = -1;
    public InputControlScheme SimRigScheme
    {
        get
        {
            if (m_SimRigSchemeIndex == -1) m_SimRigSchemeIndex = asset.FindControlSchemeIndex("Sim Rig");
            return asset.controlSchemes[m_SimRigSchemeIndex];
        }
    }
    public interface IKBMActions
    {
        void OnDrive(InputAction.CallbackContext context);
        void OnSteer(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnGears(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IPSActions
    {
        void OnDrive(InputAction.CallbackContext context);
        void OnSteer(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnGears(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IXboxActions
    {
        void OnDrive(InputAction.CallbackContext context);
        void OnSteer(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnGears(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface ISimRigActions
    {
        void OnDrive(InputAction.CallbackContext context);
    }
}
